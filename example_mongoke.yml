database_uri: mongodb://localhost/testdb

jwt:
  algorithms: [H256]
  required: false

# admin can do everything, used in server side adding a custom header
# in the web UI it is set as a password
admin:
  header: "x-mongoke-admin-secret"
  secret: "kjhfgdhfgk"

schema: |
  scalar ObjectId
  type Task {
      _id: ObjectId
      address: String
  }
  type WindowedEvent {
      value: Int
      timestamp: Int
  }
  type Guest {
      type: String
      _id: ObjectId
      name: String
  }
  enum Letter {
      a
      b
      c
  }
  type User {
      type: String
      _id: ObjectId
      name: String
      surname: String
      friends_ids: [ObjectId]
      url: String
      letter: String
  }

types:
  Default:
    collection: tasks
    permissions: # default permissions when permissions empty
      - if: "true" # default expression is true
        actions:
          - read
  WithJwtCheck:
    collection: tasks
    permissions:
      - if: "jwt['user_id'] == document['byUserId'].Hex()"
        actions: # default actions is every action
          - update
          - create
          - read
          - delete
      - hide_fields:
          - password
          - userId
        actions:
          - read
  UsingJwtRoles:
    collection: tasks
    permissions:
      - if: "jwt['role'] == 'privileged_user'" # you can use expression to define complex rules
        actions:
          - read
      - if: "jwt['role'] == 'user' && jwt['user_id'] == document['byUserId'].Hex()"
        actions:
          - update
          - read
          - delete
      - actions: [] # default last permission is nothing when permissions list not empty
  User:
    collection: tasks
    permissions:
      - if: "jwt['user_id'] == string(document['user_id'])"
        actions:
          - update
          - read
          - delete
      - hide_fields:
          - password
        actions:
          - read

relations:
  - from: Task
    to: WindowedEvent
    relation_type: to_many
    field: events
    where: {}
  - from: User
    to: User
    relation_type: to_many
    field: friends
    where: {}
  - from: User
    to: WindowedEvent
    relation_type: to_many
    field: likes_over_time
    where:
      bot_id:
        $in: ${{ parent['_id'] }}
      type: like
  - from: User
    to: Human
    field: father
    relation_type: to_one
    where:
      _id:
        $in: ${{ parent['father_id'] }}
